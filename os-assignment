#include<stdio.h>
#include<conio.h> 
  
 void rr(int no,int remt[10],int Cur_t,int arT[10], int bsT[10]); 
  
6.	main() 
7.	{ 
8.	int 
Proc_no,j,no,CurT,RemProc,indicator,time_quan,wait,tut,arT[10],bsT[10],remt[10],x=1; 
9.	indicator = 0; 
10.	wait = 0; 
11.	tut = 0; 
12.	printf("Enter number of processes "); 
13.	scanf("%d",&no); 
14.	RemProc = no; 
15.  
16.	printf("\nEnter the arrival time and burst time of the processes\n"); 
17.	for(Proc_no = 0;Proc_no < no;Proc_no++) 
18.	{ 
19.	printf("\nProcess P%d\n",Proc_no+1); 
20.	printf("Arrival time = "); 
21.	scanf("%d",&arT[Proc_no]); 
22.	printf("Burst time = "); 
23.	scanf("%d",&bsT[Proc_no]); 
24.	remt[Proc_no]=bsT[Proc_no]; 
25.	} 
26.  
27.	printf("problem to be solved is:\n\n\n"); 
28.	printf("process_no         arrival time           burst time\n"); 
29.  
30.	for(Proc_no = 0;Proc_no < no;Proc_no++) 
31.	{ 
32.  
33.	printf("p%d",Proc_no+1); 
34.	printf("\t\t\t%d",arT[Proc_no]); 
35.	printf("\t\t\t%d",bsT[Proc_no]); 
36.	printf("\n"); 
37.	} 
38.	39.  
40.  
41.	printf("The details of time quantum are as follows:\n"); 
42.	printf("The time quantum for first round is 6.\n"); 
43.	time_quan=6; 
44.	CurT=0; 
45.	for(Proc_no=0;RemProc!=0;) 
46.	{ 
47.	if(remt[Proc_no]<=time_quan && remt[Proc_no]>0) 
48.	{ 
49.	CurT+=remt[Proc_no]; 
50.	remt[Proc_no]=0; 
51.	indicator=1; 
52.	} 
53.	else if(remt[Proc_no]>0) 
54.	{ 
55.	remt[Proc_no]-=time_quan; 
56.	CurT+=time_quan; 
57.	} 
58.	if(remt[Proc_no]==0 && indicator==1) 
59.	{ printf("%d",Proc_no); 
60.	RemProc--; 
61.	printf("P %d",Proc_no+1); 
62.	printf("\t\t\t%d",CurT-arT[Proc_no]); 
63.	printf("\t\t\t%d\n",CurT-bsT[Proc_no]-arT[Proc_no]); 
64.	wait+=CurT-arT[Proc_no]-bsT[Proc_no]; 
65.	tut+=CurT-arT[Proc_no]; 
66.	indicator=0; 
67.  
68.	} 
69.	if(Proc_no==no-1){ 
70.	x++; 
71.	if(x==2){ 
72.	Proc_no=0; 73.  	 	 	 	time_quan=10; 
74.  
75.	printf("The time quantum for second round is 10. \n"); 
76.	} 
77.	else{ 
78.	break; 
79.	} 
80.	} 
81.	else if(CurT >= arT[Proc_no+1]){ 
82.	Proc_no++; 
83.	} 
84.	else{ 
85.	Proc_no=0; 
86.	} 
87.	} 
88.  
89.  	rr(no,remt,CurT,arT,bsT); 
90.  
91.	return 0; 
92.	} 
93.  
94.  
95. void rr(int no,int remt[10],int Cur_t,int arT[10], int bsT[10]){ 
96.  
97.	float avg_wait,avg_tut; 
98.	int i,j,n=no,temp,btime[20],Proc_no[20],w_time[20],tut_t[20],total=0,loc; 
99.  
100. 	    printf("Third round with least burst time.\n"); 
101. 	 
102.	for(i=0;i<n;i++) 
103.	{ 
104.	btime[i]=remt[i]; 
105.	w_time[i]=Cur_t-arT[i]-btime[i]; 
106.	Proc_no[i]=i+1; 
107.	} 
108. 	 
109.	for(i=0;i<n;i++) 
110.	{ 
111.	loc=i; 
112.	for(j=i+1;j<n;j++) 
113.	{ 
114.	if(btime[j]<btime[loc]){ 
115.	loc=j; 
116.	} 
117.	} 
118.	temp=btime[i]; 
119.	btime[i]=btime[loc]; 
120.	btime[loc]=temp; 
121.	temp=Proc_no[i]; 
122.	Proc_no[i]=Proc_no[loc]; 
123.	Proc_no[loc]=temp; 
124.	} 
125. 	 
126.	for(i=1;i<n;i++) 
127.	{ 
128.	for(j=0;j<i;j++){ 
129.	w_time[i]+=btime[j]; 
130.	} 
131.	total+=w_time[i]; 
132.	} 
133. 	 
134.	avg_wait=(float)total/n; 
135.	total=0; 
136.	printf("\nProcess\t\tBurst time\t\twaiting time\t\tTurnaround Time"); 
137.	for(i=0;i<n;i++) 
138.	{ 
139.	tut_t[i]=btime[i]+w_time[i]; 
140.	total=total + tut_t[i]; 
141.	printf("\nP%d\t\t\t%d\t\t\t%d\t\t\t%d",Proc_no[i],btime[i],w_time[i],tut_t[i]); 
142.	} 
143.	avg_tut=(float)total/n; 
144.	printf("\n\nAverage waiting time = %f",avg_wait); 145. 	    printf("\n Average turnaround time = %f\n",avg_tut); 
146. 	 
147. 	} 
